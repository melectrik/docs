Tasks
=====

ViUR comes with a sophisticated interface for tasks, providing a standardized way of
having a function called in a regular interval, providing an interface for tasks that
can be called by the user on demand, and deferring functionality from the current request.

Time based
----------

A common problem on the GAE is having certain functionality executed in a regular interval.
ViUR simplifies this down to a decorator. Just wrap a function with :py:decorator:'server.tasks.PeriodicTask` and
ViUR will call it in a regular interval. These calls are guaranteed to be made on a backend,
so there's no time-limit for your task. The decorator takes one argument - the interval.
ViUR will not call your function faster than once in each interval-minutes.

.. Note::
    This is the *lower* bound. There is no guarantee that it will be called
    each intervall minutes. The upper bound is defined in cron.yaml and currently defaults
    to each 4 hours.

.. Note::
   Time-based tasks can be a bound or unbound Function. If a function is bound (defined
   in a class) it will be called once for each module derived from this class. If there is no instance
   of its class, it won't be called. If its unbound (defined at module-level) it will be called,
   regardless if any Class in its module is used or not.

Deferred
--------

Sometimes its necessary to delay the execution of some specific code, so it won't slow down the
response of the current request. ViUR provides the :py:decorator:`server.tasks.callDefered` Decorator for such cases.
A function decorated this way will never execute in the context of the current request. All calls to
such a function are catched, its parameters serialized, and a task is created to call this function later.

.. Note::
    A deferred function cannot return a value! The return-value for the code calling such a function
   will always be None, and any return-value generated by the function (when its actually called) will be discarded.

.. Warning::
    This replaces the deferred-api provided by the GAE itself. Don't use it - it will break assumptions
    made by ViUR!

On Demand
---------

The third use-case for tasks is on demand: A task that's run infrequently by the user.
One example is our rebuild searchindex task: If changes are made to a datamodel (ie. include
the contents of a Bone in the fulltext search), and there is already data in the datastore
created by the old model, its necessary to update the searchindex, as it doesn't contain
the contents of that bone yet.
It would be a waste of resources if rebuild each index frequently.
So this task is only called on demand. If the developer has made changes to the datamodel,
he calls that task once for the affected index.
Creating such a task is also easy, its a Class derived from :py:class:`server.tasks.CallableTaskBase` and decorated with
:py:decorator:`server.tasks.CallableTask`. The derived subclass must override the following properties and functions.

\begin{tabular}{|c|c|c|}
\hline
 Name & Type & Description \\
\hline
\hline
 id & Property (String) & An unique identifier for this task. \\
\hline
 name & Property (String) & A short human-readable description \\
\hline
 descr & Property (String) & A longer explanation \\
\hline
 direct & Property (Bool) & If True, this task will execute directly after beeing\\
 & &			    called if False it will be deferred to the backend. \\
\hline
canCall & Function & Must return True if the current user (if any) is allowed\\
 & &		     to execute that task. Return False otherwise. \\
\hline
dataSkel & Function or Skeleton-class & If your tasks need additional Input\\
& &					(ie: which searchindex?) \\
& &					from the user, query him by returning an skeleton.\\
& & 					Return None if you don't need any informations. \\
\hline

execute & Function & Does the actual work. If you returned a skeleton in\\
& &			dataSkel, the values of that Skeleton are passed \\
& &			as keyword arguments. If you set direct to False,\\
& & 			this is executed on your backend, otherwise \\
& &			directly in the context of the request to\\
& & 			execute that task (timelimit!). \\
\hline

\end{tabular}